const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const Extra = require('telegraf/extra');
const User = require("../models/user");

const {
	leave
} = Stage;

const registerScene = new Scene('register')
registerScene.enter(async (ctx) => {
	await ctx.reply("–ü—Ä–∏–≤–µ—Ç!");
	console.log(ctx.update);
	const {
		from
	} = (ctx.message || ctx.update.callback_query.message);

	let searchResult = await User.findOne({
		id: from.id
	});

	if (searchResult && searchResult.id == from.id) {
		await leave();
		await ctx.scene.enter("main");
	} else {
		await ctx.reply("–¢—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ö–∞–Ω–∞–ª–∞ –∏–ª–∏ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?", Extra.HTML().markup((m) =>
			m.inlineKeyboard([
				m.callbackButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', "admin"),
				m.callbackButton('–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', "user"),
			], {
				columns: 1
			})))
	}
});

registerScene.on('callback_query', async (ctx) => {

	console.log(ctx.update);
	const {
		from
	} = ctx.update.callback_query;

	const ctxVM = ctx;

	let user = new User({
		id: from.id,
		first_name: from.first_name,
		last_name: from.last_name,
		chat_id: ctx.update.callback_query.message.chat.id,
		isAdmin: ctx.update.callback_query.data === "admin" ? true : false
	});

	try {
		await user.save();
		// await ctx.scene.reset();
	} catch (error) {
		throw new Error(error);
	}
});

const main = new Scene('main');

main.enter(async (ctx) => {
	let menu = [];
	let ctxVM = ctx;
	const {
		from
	} = ctx.update.message;
	console.log(ctx.update);
	const searchResult = await User.findOne({
		id: from.id
	});
	console.log(searchResult);
	ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Extra.HTML().markup((m) => {
		if (searchResult.isAdmin === true) menu.push(m.callbackButton('–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', "add"));
		return m.inlineKeyboard([...menu, m.callbackButton("–ë–∞–ª–∞–Ω—Å", "balance")], {
			columns: 1
		})
	}))
});

main.on('callback_query', async (ctx) => {
	const {
		from
	} = ctx.update.callback_query;
	const searchResult = await User.findOne({
		id: from.id
	});
	if (ctx.update.callback_query.data === "balance") return ctx.replyWithHTML("<b>–ë–∞–ª–∞–Ω—Å:</b> <code>" + searchResult.balance + "üíé</code>");
	if (ctx.update.callback_query.data === "add") {
		/*

			–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏?		[—Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ]

			–ö–æ–≥–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –∫–∞–º–ø–∞–Ω–∏—è?				[—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞]

			–°–∫–æ–ª—å–∫–æ –æ–Ω–∞ –ø—Ä–æ–¥–ª–∏—Ç—å—Å—è?					[–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü]

			–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å–µ–π—á–∞—Å?			[–¥–∞, –Ω–µ—Ç -----> —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ–∑–∂–µ? [–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç]]

			—Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é?	[—Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ]

			–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞		[—Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ, –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ]

			–í–´ –£–í–ï–†–ï–ù–ù–´ 							[–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å]


		*/
		// await ctx.replyWithHTML("<b>–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª, (–ë–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!).</b>");
		// const botInfo = await bot.telegram.getMe();
		// await ctx.replyWithHTML(`<a href='https://telegram.me/${botInfo.username}?startgroup=true'> –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ </a>`)
		await ctx.scene.enter("createCompany");
	}
});

/**
 * @description –ö–æ—Å—Ç—ã–ª—å –Ω–∞ –∫–æ—Å—Ç—ã–ª–µ, –∑–Ω–∞—é, –Ω–æ —á—Ç–æ –±–ª—è—Ç—å –ø–æ–¥–µ–ª–∞—Ç—å! –†–∞–±–æ—Ç–∞–µ—Ç –∏ –∑–∞–µ–±–∏—Å—å!
 */

const company = new Scene("createCompany");

let actionIndex = 0;

let actions = [
	(ctx) => {
		ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏?');
	},
	(ctx) => {
		ctx.reply('–ö–æ–≥–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –∫–∞–º–ø–∞–Ω–∏—è?', Extra.HTML().markup((m) => {
			return m.inlineKeyboard([m.callbackButton("—Å–µ–≥–æ–¥–Ω—è", "next"), m.callbackButton("–∑–∞–≤—Ç—Ä–∞", "next")], {
				columns: 1
			})
		}));
	},
	(ctx) => {
		ctx.reply('–°–∫–æ–ª—å–∫–æ –æ–Ω–∞ –ø—Ä–æ–¥–ª–∏—Ç—å—Å—è?', Extra.HTML().markup((m) => {
			return m.inlineKeyboard([m.callbackButton("–¥–µ–Ω—å", "next"), m.callbackButton("–Ω–µ–¥–µ–ª—è", "next"), m.callbackButton("–º–µ—Å—è—Ü", "next")], {
				columns: 1
			})
		}));
	},
	(ctx) => {
		ctx.reply('–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å–µ–π—á–∞—Å', Extra.HTML().markup((m) => {
			return m.inlineKeyboard([m.callbackButton("–Ω–µ—Ç", "next"), m.callbackButton("–¥–∞", "next")], {
				columns: 2
			})
		}));
	},
	(ctx) => {
		ctx.reply('–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞?');
	},
	(ctx) => {
		ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?');
	},
	(ctx) => {
		global.fuckingpeaceofshitKOSTIL = ctx.update.message.text;
		ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?', Extra.HTML().markup((m) => {
			return m.inlineKeyboard([m.callbackButton("–Ω–µ—Ç", "next"), m.callbackButton("–¥–∞", "next")], {
				columns: 2
			})
		}));
	},
	(ctx) => {
		ctx.telegram.sendMessage(-1001408238191, global.fuckingpeaceofshitKOSTIL, Extra.HTML().markup((m) =>
			m.inlineKeyboard([
				m.callbackButton('1üíé', 1),
				m.callbackButton('2üíé', 2),
				m.callbackButton('3üíé', 3),
				m.callbackButton('4üíé', 4),
				m.callbackButton('5üíé', 5),
			], {
				columns: 2,
				rows: 3
			})));
	}

];

let performAction = (ctx) => {
	let out = actions[actionIndex];
	actionIndex = actionIndex + 1;
	if (out === undefined) leave();
	else return out(ctx);
}

company.enter(performAction);

company.on('message', performAction);

company.on('callback_query', performAction);

company.leave((ctx) => {
	return ctx.scene.enter("main");
})

const stage = new Stage();
stage.register(main);
stage.register(registerScene);
stage.register(company);

module.exports = stage;